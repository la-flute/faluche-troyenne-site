'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _jestInCase = require('jest-in-case');

var _jestInCase2 = _interopRequireDefault(_jestInCase);

var _constants = require('./constants');

var _Select = require('../Select');

var _Select2 = _interopRequireDefault(_Select);

var _components = require('../components');

var _primitives = require('../primitives');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ClearIndicator = _components.components.ClearIndicator,
    Control = _components.components.Control,
    DropdownIndicator = _components.components.DropdownIndicator,
    GroupHeading = _components.components.GroupHeading,
    IndicatorsContainer = _components.components.IndicatorsContainer,
    Input = _components.components.Input,
    Menu = _components.components.Menu,
    MultiValue = _components.components.MultiValue,
    NoOptionsMessage = _components.components.NoOptionsMessage,
    Option = _components.components.Option,
    Placeholder = _components.components.Placeholder,
    ValueContainer = _components.components.ValueContainer,
    SingleValue = _components.components.SingleValue;


var BASIC_PROPS = {
  className: 'react-select',
  onChange: jest.fn(),
  onInputChange: jest.fn(),
  onMenuClose: jest.fn(),
  onMenuOpen: jest.fn(),
  name: 'test-input-name',
  options: _constants.OPTIONS
};

test('snapshot - defaults', function () {
  var tree = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, null));
  expect((0, _enzymeToJson2.default)(tree)).toMatchSnapshot();
});

test('instanceId prop > to have instanceId as id prefix for the select components', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, { menuIsOpen: true, instanceId: 'custom-id' })));
  expect(selectWrapper.find(Input).props().id).toContain('custom-id');
  selectWrapper.find('div.react-select__option').forEach(function (opt) {
    expect(opt.props().id).toContain('custom-id');
  });
});

test('hidden input field is not present if name is not passes', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, { options: _constants.OPTIONS }));
  expect(selectWrapper.find('input[type="hidden"]').exists()).toBeFalsy();
});

test('single select > passing multiple values > should select the first value', function () {
  var props = _extends({}, BASIC_PROPS, { value: [_constants.OPTIONS[0], _constants.OPTIONS[4]] });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find(Control).text()).toBe('0');
});

test('isRtl boolean props is passed down to the control component', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, { value: [_constants.OPTIONS[0]], isRtl: true, isClearable: true })));
  expect(selectWrapper.props().isRtl).toBe(true);
});

test('isOptionSelected() prop > single select > mark value as isSelected if isOptionSelected returns true for the option', function () {
  // Select all but option with label '1'
  var isOptionSelected = jest.fn(function (option) {
    return option.label !== '1';
  });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, { isOptionSelected: isOptionSelected, menuIsOpen: true })));
  // Option label 0 to be selected
  expect(selectWrapper.find(Option).at(0).props().isSelected).toBe(true);
  // Option label 1 to be not selected
  expect(selectWrapper.find(Option).at(1).props().isSelected).toBe(false);
});

test('isOptionSelected() prop > multi select > to not show the selected options in Menu for multiSelect', function () {
  // Select all but option with label '1'
  var isOptionSelected = jest.fn(function (option) {
    return option.label !== '1';
  });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    isMulti: true,
    isOptionSelected: isOptionSelected,
    menuIsOpen: true
  })));

  expect(selectWrapper.find(Option).length).toBe(1);
  expect(selectWrapper.find(Option).text()).toBe('1');
});

(0, _jestInCase2.default)('formatOptionLabel', function (_ref) {
  var props = _ref.props,
      valueComponent = _ref.valueComponent,
      expectedOptions = _ref.expectedOptions;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  var value = selectWrapper.find(valueComponent).at(0);
  expect(value.props().children).toBe(expectedOptions);
}, {
  'single select > should format label of options according to text returned by formatOptionLabel': {
    props: _extends({}, BASIC_PROPS, {
      formatOptionLabel: function formatOptionLabel(_ref2, _ref3) {
        var label = _ref2.label,
            value = _ref2.value;
        var context = _ref3.context;
        return label + ' ' + value + ' ' + context;
      },
      value: _constants.OPTIONS[0]
    }),
    valueComponent: SingleValue,
    expectedOptions: '0 zero value'
  },
  'multi select > should format label of options according to text returned by formatOptionLabel': {
    props: _extends({}, BASIC_PROPS, {
      formatOptionLabel: function formatOptionLabel(_ref4, _ref5) {
        var label = _ref4.label,
            value = _ref4.value;
        var context = _ref5.context;
        return label + ' ' + value + ' ' + context;
      },
      isMulti: true,
      value: _constants.OPTIONS[0]
    }),
    valueComponent: MultiValue,
    expectedOptions: '0 zero value'
  }
});

(0, _jestInCase2.default)('name prop', function (_ref6) {
  var expectedName = _ref6.expectedName,
      props = _ref6.props;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  var input = selectWrapper.find('input');
  expect(input.props().name).toBe(expectedName);
}, {
  'single select > should assign the given name': {
    props: _extends({}, BASIC_PROPS, { name: 'form-field-single-select' }),
    expectedName: 'form-field-single-select'
  },
  'multi select > should assign the given name': {
    props: _extends({}, BASIC_PROPS, {
      name: 'form-field-multi-select',
      isMulti: true,
      value: _constants.OPTIONS[2]
    }),
    expectedName: 'form-field-multi-select'
  }
});

(0, _jestInCase2.default)('menuIsOpen prop', function (_ref7) {
  var _ref7$props = _ref7.props,
      props = _ref7$props === undefined ? BASIC_PROPS : _ref7$props;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();

  selectWrapper.setProps({ menuIsOpen: true });
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();

  selectWrapper.setProps({ menuIsOpen: false });
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
}, {
  'single select > should show menu if menuIsOpen is true and hide menu if menuIsOpen prop is false': {},
  'multi select > should show menu if menuIsOpen is true and hide menu if menuIsOpen prop is false': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('filterOption() prop - should filter only if function returns truthy for value', function (_ref8) {
  var props = _ref8.props,
      searchString = _ref8.searchString,
      expectResultsLength = _ref8.expectResultsLength;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  selectWrapper.setProps({ inputValue: searchString });
  expect(selectWrapper.find(Option).length).toBe(expectResultsLength);
}, {
  'single select > should filter all options as per searchString': {
    props: _extends({}, BASIC_PROPS, {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      menuIsOpen: true,
      value: _constants.OPTIONS[0]
    }),
    searchString: 'o',
    expectResultsLength: 5
  },
  'multi select > should filter all options other that options in value of select': {
    props: _extends({}, BASIC_PROPS, {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      isMulti: true,
      menuIsOpen: true,
      value: _constants.OPTIONS[0]
    }),
    searchString: 'o',
    expectResultsLength: 4
  }
});

(0, _jestInCase2.default)('filterOption prop is null', function (_ref9) {
  var props = _ref9.props,
      searchString = _ref9.searchString,
      expectResultsLength = _ref9.expectResultsLength;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  selectWrapper.setProps({ inputValue: searchString });
  expect(selectWrapper.find(Option).length).toBe(expectResultsLength);
}, {
  'single select > should show all the options': {
    props: _extends({}, BASIC_PROPS, {
      filterOption: null,
      menuIsOpen: true,
      value: _constants.OPTIONS[0]
    }),
    searchString: 'o',
    expectResultsLength: 17
  },
  'multi select > should show all the options other than selected options': {
    props: _extends({}, BASIC_PROPS, {
      filterOption: null,
      isMulti: true,
      menuIsOpen: true,
      value: _constants.OPTIONS[0]
    }),
    searchString: 'o',
    expectResultsLength: 16
  }
});

(0, _jestInCase2.default)('no option found on search based on filterOption prop', function (_ref10) {
  var props = _ref10.props,
      searchString = _ref10.searchString;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  selectWrapper.setProps({ inputValue: searchString });
  expect(selectWrapper.find(NoOptionsMessage).exists()).toBeTruthy();
}, {
  'single Select > should show NoOptionsMessage': {
    props: _extends({}, BASIC_PROPS, {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      menuIsOpen: true
    }),
    searchString: 'some text not in options'
  },
  'multi select > should show NoOptionsMessage': {
    props: _extends({}, BASIC_PROPS, {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      menuIsOpen: true
    }),
    searchString: 'some text not in options'
  }
});

(0, _jestInCase2.default)('noOptionsMessage() function prop', function (_ref11) {
  var props = _ref11.props,
      expectNoOptionsMessage = _ref11.expectNoOptionsMessage,
      searchString = _ref11.searchString;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  selectWrapper.setProps({ inputValue: searchString });
  expect(selectWrapper.find(NoOptionsMessage).props().children).toBe(expectNoOptionsMessage);
}, {
  'single Select > should show NoOptionsMessage returned from noOptionsMessage function prop': {
    props: _extends({}, BASIC_PROPS, {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      menuIsOpen: true,
      noOptionsMessage: function noOptionsMessage() {
        return 'this is custom no option message for single select';
      }
    }),
    expectNoOptionsMessage: 'this is custom no option message for single select',
    searchString: 'some text not in options'
  },
  'multi select > should show NoOptionsMessage returned from noOptionsMessage function prop': {
    props: _extends({}, BASIC_PROPS, {
      filterOption: function filterOption(value, search) {
        return value.value.indexOf(search) > -1;
      },
      menuIsOpen: true,
      noOptionsMessage: function noOptionsMessage() {
        return 'this is custom no option message for multi select';
      }
    }),
    expectNoOptionsMessage: 'this is custom no option message for multi select',
    searchString: 'some text not in options'
  }
});

(0, _jestInCase2.default)('value prop', function (_ref12) {
  var props = _ref12.props,
      expectedValue = _ref12.expectedValue;

  var selectWrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.state('selectValue')).toEqual(expectedValue);
}, {
  'single select > should set it as initial value': {
    props: _extends({}, BASIC_PROPS, {
      value: _constants.OPTIONS[2]
    }),
    expectedValue: [{ label: '2', value: 'two' }]
  },
  'single select > with option values as number > should set it as initial value': {
    props: _extends({}, BASIC_PROPS, {
      value: _constants.OPTIONS_NUMBER_VALUE[2]
    }),
    expectedValue: [{ label: '2', value: 2 }]
  },
  'multi select > should set it as initial value': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      value: _constants.OPTIONS[1]
    }),
    expectedValue: [{ label: '1', value: 'one' }]
  },
  'multi select > with option values as number > should set it as initial value': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      value: _constants.OPTIONS_NUMBER_VALUE[1]
    }),
    expectedValue: [{ label: '1', value: 1 }]
  }
});

(0, _jestInCase2.default)('update the value prop', function (_ref13) {
  var _ref13$props = _ref13.props,
      props = _ref13$props === undefined ? _extends({}, BASIC_PROPS, { value: _constants.OPTIONS[1] }) : _ref13$props,
      updateValueTo = _ref13.updateValueTo,
      expectedInitialValue = _ref13.expectedInitialValue,
      expectedUpdatedValue = _ref13.expectedUpdatedValue;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toEqual(expectedInitialValue);

  selectWrapper.setProps({ value: updateValueTo });
  expect(selectWrapper.find('input[type="hidden"]').props().value).toEqual(expectedUpdatedValue);
}, {
  'single select > should update the value when prop is updated': {
    updateValueTo: _constants.OPTIONS[3],
    expectedInitialValue: 'one',
    expectedUpdatedValue: 'three'
  },
  'single select > value of options is number > should update the value when prop is updated': {
    props: _extends({}, BASIC_PROPS, {
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[2]
    }),
    updateValueTo: _constants.OPTIONS_NUMBER_VALUE[3],
    expectedInitialValue: 2,
    expectedUpdatedValue: 3
  },
  'multi select > should update the value when prop is updated': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      value: _constants.OPTIONS[1]
    }),
    updateValueTo: _constants.OPTIONS[3],
    expectedInitialValue: 'one',
    expectedUpdatedValue: 'three'
  },
  'multi select > value of options is number > should update the value when prop is updated': {
    props: _extends({}, BASIC_PROPS, {
      delimiter: ',',
      isMulti: true,
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[2]
    }),
    updateValueTo: [_constants.OPTIONS_NUMBER_VALUE[3], _constants.OPTIONS_NUMBER_VALUE[2]],
    expectedInitialValue: '2',
    expectedUpdatedValue: '3,2'
  }
});

(0, _jestInCase2.default)('calls onChange on selecting an option', function (_ref14) {
  var _ref14$props = _ref14.props,
      props = _ref14$props === undefined ? _extends({}, BASIC_PROPS, { menuIsOpen: true }) : _ref14$props,
      event = _ref14.event,
      expectedSelectedOption = _ref14.expectedSelectedOption,
      optionsSelected = _ref14.optionsSelected,
      focusedOption = _ref14.focusedOption;

  var onChangeSpy = jest.fn();
  props = _extends({}, props, { onChange: onChangeSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));

  var selectOption = selectWrapper.find('div.react-select__option').findWhere(function (n) {
    return n.props().children === optionsSelected.label;
  });
  selectWrapper.setState({ focusedOption: focusedOption });

  selectOption.simulate.apply(selectOption, _toConsumableArray(event));
  selectWrapper.update();
  expect(onChangeSpy).toHaveBeenCalledWith(expectedSelectedOption, {
    action: 'select-option'
  });
}, {
  'single select > option is clicked > should call onChange() prop with selected option': {
    event: ['click'],
    optionsSelected: { label: '2', value: 'two' },
    expectedSelectedOption: { label: '2', value: 'two' }
  },
  'single select > option with number value > option is clicked > should call onChange() prop with selected option': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true,
      options: _constants.OPTIONS_NUMBER_VALUE
    }),
    event: ['click'],
    optionsSelected: { label: '0', value: 0 },
    expectedSelectedOption: { label: '0', value: 0 }
  },
  'single select > option with boolean value > option is clicked > should call onChange() prop with selected option': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true,
      options: _constants.OPTIONS_BOOLEAN_VALUE
    }),
    event: ['click'],
    optionsSelected: { label: 'true', value: true },
    expectedSelectedOption: { label: 'true', value: true }
  },
  'single select > tab key is pressed while focusing option > should call onChange() prop with selected option': {
    event: ['keyDown', { keyCode: 9, key: 'Tab' }],
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    expectedSelectedOption: { label: '1', value: 'one' }
  },
  'single select > enter key is pressed while focusing option > should call onChange() prop with selected option': {
    event: ['keyDown', { keyCode: 13, key: 'Enter' }],
    optionsSelected: { label: '3', value: 'three' },
    focusedOption: { label: '3', value: 'three' },
    expectedSelectedOption: { label: '3', value: 'three' }
  },
  'single select > space key is pressed while focusing option > should call onChange() prop with selected option': {
    event: ['keyDown', { keyCode: 32, key: ' ' }],
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    expectedSelectedOption: { label: '1', value: 'one' }
  },
  'multi select > option is clicked > should call onChange() prop with selected option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    }),
    event: ['click'],
    optionsSelected: { label: '2', value: 'two' },
    expectedSelectedOption: [{ label: '2', value: 'two' }]
  },
  'multi select > option with number value > option is clicked > should call onChange() prop with selected option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS_NUMBER_VALUE
    }),
    event: ['click'],
    optionsSelected: { label: '0', value: 0 },
    expectedSelectedOption: [{ label: '0', value: 0 }]
  },
  'multi select > option with boolean value > option is clicked > should call onChange() prop with selected option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS_BOOLEAN_VALUE
    }),
    event: ['click'],
    optionsSelected: { label: 'true', value: true },
    expectedSelectedOption: [{ label: 'true', value: true }]
  },
  'multi select > tab key is pressed while focusing option > should call onChange() prop with selected option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    }),
    event: ['keyDown', { keyCode: 9, key: 'Tab' }],
    menuIsOpen: true,
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    expectedSelectedOption: [{ label: '1', value: 'one' }]
  },
  'multi select > enter key is pressed while focusing option > should call onChange() prop with selected option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    }),
    event: ['keyDown', { keyCode: 13, key: 'Enter' }],
    optionsSelected: { label: '3', value: 'three' },
    focusedOption: { label: '3', value: 'three' },
    expectedSelectedOption: [{ label: '3', value: 'three' }]
  },
  'multi select > space key is pressed while focusing option > should call onChange() prop with selected option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    }),
    event: ['keyDown', { keyCode: 32, key: ' ' }],
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    expectedSelectedOption: [{ label: '1', value: 'one' }]
  }
});

(0, _jestInCase2.default)('hitting escape on select option', function (_ref15) {
  var props = _ref15.props,
      event = _ref15.event,
      focusedOption = _ref15.focusedOption,
      optionsSelected = _ref15.optionsSelected;

  var onChangeSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, {
    onChange: onChangeSpy,
    onInputChange: jest.fn(),
    onMenuClose: jest.fn()
  })));

  var selectOption = selectWrapper.find('div.react-select__option').findWhere(function (n) {
    return n.props().children === optionsSelected.label;
  });
  selectWrapper.setState({ focusedOption: focusedOption });

  selectOption.simulate.apply(selectOption, _toConsumableArray(event));
  expect(onChangeSpy).not.toHaveBeenCalled();
}, {
  'single select > should not call onChange prop': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true
    }),
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    event: ['keyDown', { keyCode: 27 }]
  },
  'multi select > should not call onChange prop': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true
    }),
    optionsSelected: { label: '1', value: 'one' },
    focusedOption: { label: '1', value: 'one' },
    event: ['keyDown', { keyCode: 27 }]
  }
});

(0, _jestInCase2.default)('click to open select', function (_ref16) {
  var _ref16$props = _ref16.props,
      props = _ref16$props === undefined ? BASIC_PROPS : _ref16$props,
      expectedToFocus = _ref16.expectedToFocus;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onMenuOpen: function onMenuOpen() {} })));

  // this will get updated on input click, though click on input is not bubbling up to control component
  selectWrapper.setState({ isFocused: true });
  var controlComponent = selectWrapper.find('div.react-select__control');
  controlComponent.simulate('mouseDown', { target: { tagName: 'div' } });
  expect(selectWrapper.state('focusedOption')).toEqual(expectedToFocus);
}, {
  'single select > should focus the first option': {
    expectedToFocus: { label: '0', value: 'zero' }
  },
  'multi select > should focus the first option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    expectedToFocus: { label: '0', value: 'zero' }
  }
});

(0, _jestInCase2.default)('focus on options > keyboard interaction with Menu', function (_ref17) {
  var props = _ref17.props,
      selectedOption = _ref17.selectedOption,
      nextFocusOption = _ref17.nextFocusOption,
      _ref17$keyEvent = _ref17.keyEvent,
      keyEvent = _ref17$keyEvent === undefined ? [] : _ref17$keyEvent;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));

  selectWrapper.setState({ focusedOption: selectedOption });
  expect(selectWrapper.state('focusedOption')).toEqual(selectedOption);

  keyEvent.map(function (event) {
    return selectWrapper.find(Menu).simulate('keyDown', event);
  });
  expect(selectWrapper.state('focusedOption')).toEqual(nextFocusOption);
}, {
  'single select > ArrowDown key on first option should focus second option': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true
    }),
    keyEvent: [{ keyCode: 40, key: 'ArrowDown' }],
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'single select > ArrowDown key on last option should focus first option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 40, key: 'ArrowDown' }],
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'single select > ArrowUp key on first option should focus last option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 38, key: 'ArrowUp' }],
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'single select > ArrowUp key on last option should focus second last option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 38, key: 'ArrowUp' }],
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 2]
  },
  'single select > PageDown key takes us to next page with default page size of 5': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 34, key: 'PageDown' }],
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[5]
  },
  'single select > PageDown key takes us to next page with custom pageSize 7': {
    props: {
      menuIsOpen: true,
      pageSize: 7,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 34, key: 'PageDown' }],
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[7]
  },
  'single select > PageDown key takes to the last option is options below is less then page size': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 34, key: 'PageDown' }],
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 3],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'single select > PageUp key takes us to previous page with default page size of 5': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 33, key: 'PageUp' }],
    selectedOption: _constants.OPTIONS[6],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'single select > PageUp key takes us to previous page with custom pageSize of 7': {
    props: {
      menuIsOpen: true,
      pageSize: 7,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 33, key: 'PageUp' }],
    selectedOption: _constants.OPTIONS[9],
    nextFocusOption: _constants.OPTIONS[2]
  },
  'single select > PageUp key takes us to first option - (previous options < pageSize)': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 33, key: 'PageUp' }],
    selectedOption: _constants.OPTIONS[1],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'single select > Home key takes up to the first option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 36, key: 'Home' }],
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 3],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'single select > End key takes down to the last option': {
    props: {
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 35, key: 'End' }],
    selectedOption: _constants.OPTIONS[2],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'multi select > ArrowDown key on first option should focus second option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 40, key: 'ArrowDown' }],
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'multi select > ArrowDown key on last option should focus first option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 40, key: 'ArrowDown' }],
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'multi select > ArrowUp key on first option should focus last option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 38, key: 'ArrowUp' }],
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'multi select > ArrowUp key on last option should focus second last option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 38, key: 'ArrowUp' }],
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 2]
  },
  'multi select > PageDown key takes us to next page with default page size of 5': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 34, key: 'PageDown' }],
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[5]
  },
  'multi select > PageDown key takes us to next page with custom pageSize of 8': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      pageSize: 8,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 34, key: 'PageDown' }],
    selectedOption: _constants.OPTIONS[0],
    nextFocusOption: _constants.OPTIONS[8]
  },
  'multi select > PageDown key takes to the last option is options below is less then page size': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 34, key: 'PageDown' }],
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 3],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  },
  'multi select > PageUp key takes us to previous page with default page size of 5': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 33, key: 'PageUp' }],
    selectedOption: _constants.OPTIONS[6],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'multi select > PageUp key takes us to previous page with default page size of 9': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      pageSize: 9,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 33, key: 'PageUp' }],
    selectedOption: _constants.OPTIONS[10],
    nextFocusOption: _constants.OPTIONS[1]
  },
  'multi select > PageUp key takes us to first option - previous options < pageSize': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 33, key: 'PageUp' }],
    selectedOption: _constants.OPTIONS[1],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'multi select > Home key takes up to the first option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 36, key: 'Home' }],
    selectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 3],
    nextFocusOption: _constants.OPTIONS[0]
  },
  'multi select > End key takes down to the last option': {
    props: {
      isMulti: true,
      menuIsOpen: true,
      options: _constants.OPTIONS
    },
    keyEvent: [{ keyCode: 35, key: 'End' }],
    selectedOption: _constants.OPTIONS[2],
    nextFocusOption: _constants.OPTIONS[_constants.OPTIONS.length - 1]
  }
});

// TODO: Cover more scenario
(0, _jestInCase2.default)('hitting escape with inputValue in select', function (_ref18) {
  var props = _ref18.props;

  var spy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onInputChange: spy, onMenuClose: jest.fn() })));

  selectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  expect(spy).toHaveBeenCalledWith('', { action: 'menu-close' });
}, {
  'single select > should call onInputChange prop with empty string as inputValue': {
    props: _extends({}, BASIC_PROPS, {
      inputValue: 'test',
      menuIsOpen: true,
      value: _constants.OPTIONS[0]
    })
  },
  'multi select > should call onInputChange prop with empty string as inputValue': {
    props: _extends({}, BASIC_PROPS, {
      inputValue: 'test',
      isMulti: true,
      menuIsOpen: true,
      value: _constants.OPTIONS[0]
    })
  }
});

(0, _jestInCase2.default)('Clicking dropdown indicator on select with closed menu with primary button on mouse', function (_ref19) {
  var _ref19$props = _ref19.props,
      props = _ref19$props === undefined ? BASIC_PROPS : _ref19$props;

  var onMenuOpenSpy = jest.fn();
  props = _extends({}, props, { onMenuOpen: onMenuOpenSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  // Menu is closed
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(onMenuOpenSpy).toHaveBeenCalled();
}, {
  'single select > should call onMenuOpen prop when select is opened and onMenuClose prop when select is closed': {},
  'multi select > should call onMenuOpen prop when select is opened and onMenuClose prop when select is closed': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('Clicking dropdown indicator on select with open menu with primary button on mouse', function (_ref20) {
  var _ref20$props = _ref20.props,
      props = _ref20$props === undefined ? BASIC_PROPS : _ref20$props;

  var onMenuCloseSpy = jest.fn();
  props = _extends({}, props, { onMenuClose: onMenuCloseSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true })));
  // Menu is open
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(onMenuCloseSpy).toHaveBeenCalled();
}, {
  'single select > should call onMenuOpen prop when select is opened and onMenuClose prop when select is closed': {},
  'multi select > should call onMenuOpen prop when select is opened and onMenuClose prop when select is closed': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('clicking on select using secondary button on mouse', function (_ref21) {
  var _ref21$props = _ref21.props,
      props = _ref21$props === undefined ? BASIC_PROPS : _ref21$props;

  var onMenuOpenSpy = jest.fn();
  var onMenuCloseSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, {
    onMenuClose: onMenuCloseSpy,
    onMenuOpen: onMenuOpenSpy
  })));
  var downButtonWrapper = selectWrapper.find('div.react-select__dropdown-indicator');

  // does not open menu if menu is closed
  expect(selectWrapper.props().menuIsOpen).toBe(false);
  downButtonWrapper.simulate('mouseDown', { button: 1 });
  expect(onMenuOpenSpy).not.toHaveBeenCalled();

  // does not close menu if menu is opened
  selectWrapper.setProps({ menuIsOpen: true });
  downButtonWrapper.simulate('mouseDown', { button: 1 });
  expect(onMenuCloseSpy).not.toHaveBeenCalled();
}, {
  'single select > secondary click is ignored > should not call onMenuOpen and onMenuClose prop': {},
  'multi select > secondary click is ignored > should not call onMenuOpen and onMenuClose prop': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('required on input is not there by default', function (_ref22) {
  var _ref22$props = _ref22.props,
      props = _ref22$props === undefined ? BASIC_PROPS : _ref22$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onInputChange: jest.fn() })));
  var inputWrapper = selectWrapper.find('Control input');
  expect(inputWrapper.props().required).toBeUndefined();
}, {
  'single select > should not have required attribute': {},
  'multi select > should not have required attribute': {}
});

(0, _jestInCase2.default)('value of hidden input control', function (_ref23) {
  var _ref23$props = _ref23.props,
      props = _ref23$props === undefined ? { options: _constants.OPTIONS } : _ref23$props,
      expectedValue = _ref23.expectedValue;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  var hiddenInput = selectWrapper.find('input[type="hidden"]');
  expect(hiddenInput.props().value).toEqual(expectedValue);
}, {
  'single select > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      value: _constants.OPTIONS[3]
    }),
    expectedValue: 'three'
  },
  'single select > options with number values > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[3]
    }),
    expectedValue: 3
  },
  'single select > options with boolean values > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      options: _constants.OPTIONS_BOOLEAN_VALUE,
      value: _constants.OPTIONS_BOOLEAN_VALUE[1]
    }),
    expectedValue: false
  },
  'multi select > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      value: _constants.OPTIONS[3]
    }),
    expectedValue: 'three'
  },
  'multi select > with delimiter prop > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      delimiter: ', ',
      isMulti: true,
      value: [_constants.OPTIONS[3], _constants.OPTIONS[5]]
    }),
    expectedValue: 'three, five'
  },
  'multi select > options with number values > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: _constants.OPTIONS_NUMBER_VALUE[3]
    }),
    expectedValue: 3
  },
  'multi select > with delimiter prop > options with number values > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      delimiter: ', ',
      isMulti: true,
      options: _constants.OPTIONS_NUMBER_VALUE,
      value: [_constants.OPTIONS_NUMBER_VALUE[3], _constants.OPTIONS_NUMBER_VALUE[1]]
    }),
    expectedValue: '3, 1'
  },
  'multi select > options with boolean values > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      options: _constants.OPTIONS_BOOLEAN_VALUE,
      value: _constants.OPTIONS_BOOLEAN_VALUE[1]
    }),
    expectedValue: false
  },
  'multi select > with delimiter prop > options with boolean values > should set value of input as value prop': {
    props: _extends({}, BASIC_PROPS, {
      delimiter: ', ',
      isMulti: true,
      options: _constants.OPTIONS_BOOLEAN_VALUE,
      value: [_constants.OPTIONS_BOOLEAN_VALUE[1], _constants.OPTIONS_BOOLEAN_VALUE[0]]
    }),
    expectedValue: 'false, true'
  }
});

(0, _jestInCase2.default)('isOptionDisabled() prop', function (_ref24) {
  var props = _ref24.props,
      expectedEnabledOption = _ref24.expectedEnabledOption,
      expectedDisabledOption = _ref24.expectedDisabledOption;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));

  var enabledOptions = selectWrapper.find('Option[isDisabled=false]').filterWhere(function (n) {
    return !n.props().isDisabled;
  });
  var enabledOptionsValues = enabledOptions.map(function (option) {
    return option.text();
  });
  enabledOptionsValues.map(function (option) {
    expect(expectedDisabledOption.indexOf(option)).toBe(-1);
  });

  var disabledOptions = selectWrapper.find('Option[isDisabled=false]').filterWhere(function (n) {
    return n.props().isDisabled;
  });
  var disabledOptionsValues = disabledOptions.map(function (option) {
    return option.text();
  });
  disabledOptionsValues.map(function (option) {
    expect(expectedEnabledOption.indexOf(option)).toBe(-1);
  });
}, {
  'single select > should add isDisabled as true prop only to options that are disabled': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true,
      isOptionDisabled: function isOptionDisabled(option) {
        return ['zero', 'two', 'five', 'ten'].indexOf(option.value) > -1;
      }
    }),
    expectedEnabledOption: ['1', '3', '11'],
    expectedDisabledOption: ['0', '2', '5']
  },
  'multi select > should add isDisabled as true prop only to options that are disabled': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true,
      isOptionDisabled: function isOptionDisabled(option) {
        return ['zero', 'two', 'five', 'ten'].indexOf(option.value) > -1;
      }
    }),
    expectedEnabledOption: ['1', '3', '11'],
    expectedDisabledOption: ['0', '2', '5']
  }
});

(0, _jestInCase2.default)('isDisabled prop', function (_ref25) {
  var props = _ref25.props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.props().isDisabled).toBeTruthy();

  var controlWrapper = selectWrapper.find(Control);
  expect(controlWrapper.props().isDisabled).toBeTruthy();

  var valueWrapper = selectWrapper.find(ValueContainer);
  expect(valueWrapper.props().isDisabled).toBeTruthy();

  var indicatorsContainerWrapper = selectWrapper.find(IndicatorsContainer);
  expect(indicatorsContainerWrapper.props().isDisabled).toBeTruthy();

  var DropdownIndicatorWrapper = selectWrapper.find(DropdownIndicator);
  expect(DropdownIndicatorWrapper.props().isDisabled).toBeTruthy();
}, {
  'single select > should add isDisabled prop to select components': {
    props: _extends({}, BASIC_PROPS, {
      isDisabled: true
    })
  },
  'multi select > should add isDisabled prop to select components': {
    props: _extends({}, BASIC_PROPS, {
      isDisabled: true,
      isMulti: true
    })
  }
});

test('hitting tab on option should not call onChange if tabSelectsValue is false', function () {
  var spy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, {
    className: 'react-select',
    menuIsOpen: true,
    onChange: spy,
    onInputChange: jest.fn(),
    onMenuClose: jest.fn(),
    options: _constants.OPTIONS,
    tabSelectsValue: false
  }));

  var selectOption = selectWrapper.find('div.react-select__option').at(0);
  selectWrapper.setState({ focusedOption: { label: '2', value: 'two' } });

  selectOption.simulate('keyDown', { keyCode: 9, key: 'Tab' });
  expect(spy).not.toHaveBeenCalled();
});

test('multi select > to not show selected value in options', function () {
  var onInputChangeSpy = jest.fn();
  var onMenuCloseSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    isMulti: true,
    menuIsOpen: true,
    onInputChange: onInputChangeSpy,
    onMenuClose: onMenuCloseSpy
  })));

  var availableOptions = selectWrapper.find(Option).map(function (option) {
    return option.text();
  });
  expect(availableOptions.indexOf('0') > -1).toBeTruthy();

  selectWrapper.setProps({ value: _constants.OPTIONS[0] });

  // Re-open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  availableOptions = selectWrapper.find(Option).map(function (option) {
    return option.text();
  });

  expect(availableOptions.indexOf('0') > -1).toBeFalsy();
});

test('multi select > to not hide the selected options from the menu if hideSelectedOptions is false', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, {
    className: 'react-select',
    hideSelectedOptions: false,
    isMulti: true,
    menuIsOpen: true,
    onChange: jest.fn(),
    onInputChange: jest.fn(),
    onMenuClose: jest.fn(),
    options: _constants.OPTIONS
  }));
  var firstOption = selectWrapper.find(Option).at(0);
  var secondoption = selectWrapper.find(Option).at(1);
  expect(firstOption.text()).toBe('0');
  expect(secondoption.text()).toBe('1');

  firstOption.find('div.react-select__option').simulate('click', { button: 0 });

  expect(firstOption.text()).toBe('0');
  expect(secondoption.text()).toBe('1');
});

test('multi select > call onChange with all values but last selected value and remove event on hitting backspace', function () {
  var onChangeSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    isMulti: true,
    onChange: onChangeSpy,
    value: [_constants.OPTIONS[0], _constants.OPTIONS[1], _constants.OPTIONS[2]]
  })));
  expect(selectWrapper.find(Control).text()).toBe('012');

  selectWrapper.find(Control).simulate('keyDown', { keyCode: 8, key: 'Backspace' });
  expect(onChangeSpy).toHaveBeenCalledWith([{ label: '0', value: 'zero' }, { label: '1', value: 'one' }], { action: 'pop-value' });
});

test('should not call onChange on hitting backspace when backspaceRemovesValue is false', function () {
  var onChangeSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    backspaceRemovesValue: false,
    onChange: onChangeSpy
  })));
  selectWrapper.find(Control).simulate('keyDown', { keyCode: 8, key: 'Backspace' });
  expect(onChangeSpy).not.toHaveBeenCalled();
});

test('multi select > clicking on X next to option will call onChange with all options other that the clicked option', function () {
  var onChangeSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    isMulti: true,
    onChange: onChangeSpy,
    value: [_constants.OPTIONS[0], _constants.OPTIONS[2], _constants.OPTIONS[4]]
  })));
  // there are 3 values in select
  expect(selectWrapper.find(MultiValue).length).toBe(3);

  var selectValueWrapper = selectWrapper.find(MultiValue).filterWhere(function (multiValue) {
    return multiValue.text() === '4';
  });
  selectValueWrapper.find('div.react-select__multi-value__remove').simulate('click', { button: 0 });

  expect(onChangeSpy).toHaveBeenCalledWith([{ label: '0', value: 'zero' }, { label: '2', value: 'two' }], { action: 'remove-value' });
});

(0, _jestInCase2.default)('accessibility - select input with defaults', function (_ref26) {
  var _ref26$props = _ref26.props,
      props = _ref26$props === undefined ? BASIC_PROPS : _ref26$props,
      _ref26$expectAriaHasp = _ref26.expectAriaHaspopup,
      expectAriaHaspopup = _ref26$expectAriaHasp === undefined ? false : _ref26$expectAriaHasp,
      _ref26$expectAriaExpa = _ref26.expectAriaExpanded,
      expectAriaExpanded = _ref26$expectAriaExpa === undefined ? false : _ref26$expectAriaExpa;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  var selectInput = selectWrapper.find('Control input');

  expect(selectInput.props().role).toBe('combobox');
  expect(selectInput.props()['aria-haspopup']).toBe(expectAriaHaspopup);
  expect(selectInput.props()['aria-expanded']).toBe(expectAriaExpanded);
}, {
  'single select > with menu closed > input should have aria role combobox, and aria-haspopup, aria-expanded as false': {},
  'single select > with menu open > input should have aria role combobox, and aria-haspopup, aria-expanded as true': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true
    }),
    expectAriaHaspopup: true,
    expectAriaExpanded: true
  },
  'multi select > with menu closed > input should have aria role combobox, and aria-haspopup, aria-expanded as false': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  },
  'multi select > with menu open > input should have aria role combobox, and aria-haspopup, aria-expanded as true': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true
    }),
    expectAriaHaspopup: true,
    expectAriaExpanded: true
  }
});

/**
 * TODO: Need to get hightlight a menu option and then match value with aria-activedescendant prop
 */
(0, _jestInCase2.default)('accessibility > aria-activedescendant', function (_ref27) {
  var _ref27$props = _ref27.props,
      props = _ref27$props === undefined ? _extends({}, BASIC_PROPS) : _ref27$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true })));

  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 40, key: 'ArrowDown' });
  expect(selectWrapper.find('Control input').props()['aria-activedescendant']).toBe('1');
}, {
  'single select > should update aria-activedescendant as per focused uption': {
    skip: true
  },
  'multi select > should update aria-activedescendant as per focused uption': {
    skip: true,
    props: _extends({}, BASIC_PROPS, {
      value: { label: '2', value: 'two' }
    })
  }
});

(0, _jestInCase2.default)('accessibility > passes through aria-labelledby prop', function (_ref28) {
  var _ref28$props = _ref28.props,
      props = _ref28$props === undefined ? _extends({}, BASIC_PROPS, { 'aria-labelledby': 'testing' }) : _ref28$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find('Control input').props()['aria-labelledby']).toBe('testing');
}, {
  'single select > should pass aria-labelledby prop down to input': {},
  'multi select > should pass aria-labelledby prop down to input': {
    props: _extends({}, BASIC_PROPS, {
      'aria-labelledby': 'testing',
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('accessibility > passes through aria-describedby prop', function (_ref29) {
  var _ref29$props = _ref29.props,
      props = _ref29$props === undefined ? _extends({}, BASIC_PROPS, { 'aria-describedby': 'testing' }) : _ref29$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find('Control input').props()['aria-describedby']).toBe('testing');
}, {
  'single select > should pass aria-labelledby prop down to input': {},
  'multi select > should pass aria-labelledby prop down to input': {
    props: _extends({}, BASIC_PROPS, {
      'aria-describedby': 'testing',
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('accessibility > passes through aria-label prop', function (_ref30) {
  var _ref30$props = _ref30.props,
      props = _ref30$props === undefined ? _extends({}, BASIC_PROPS, { 'aria-label': 'testing' }) : _ref30$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find('Control input').props()['aria-label']).toBe('testing');
}, {
  'single select > should pass aria-labelledby prop down to input': {},
  'multi select > should pass aria-labelledby prop down to input': {
    props: _extends({}, BASIC_PROPS, {
      'aria-label': 'testing',
      isMulti: true
    })
  }
});

test('accessibility > to show the number of options available in A11yText', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, { inputValue: '' })));
  expect(selectWrapper.find(_primitives.A11yText).text()).toBe('17 results available.');

  selectWrapper.setProps({ inputValue: '0' });
  expect(selectWrapper.find(_primitives.A11yText).text()).toBe('2 results available.');

  selectWrapper.setProps({ inputValue: '10' });
  expect(selectWrapper.find(_primitives.A11yText).text()).toBe('1 result available.');

  selectWrapper.setProps({ inputValue: '100' });
  expect(selectWrapper.find(_primitives.A11yText).text()).toBe('0 results available.');
});

test('accessibility > screenReaderStatus function prop > to pass custom text to A11yText', function () {
  var screenReaderStatus = function screenReaderStatus(_ref31) {
    var count = _ref31.count;
    return 'There are ' + count + ' options available';
  };
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    inputValue: '',
    screenReaderStatus: screenReaderStatus
  })));
  expect(selectWrapper.find(_primitives.A11yText).text()).toBe('There are 17 options available');

  selectWrapper.setProps({ inputValue: '0' });
  expect(selectWrapper.find(_primitives.A11yText).text()).toBe('There are 2 options available');

  selectWrapper.setProps({ inputValue: '10' });
  expect(selectWrapper.find(_primitives.A11yText).text()).toBe('There are 1 options available');

  selectWrapper.setProps({ inputValue: '100' });
  expect(selectWrapper.find(_primitives.A11yText).text()).toBe('There are 0 options available');
});

test('closeMenuOnSelect prop > when passed as false it should not call onMenuClose on selecting option', function () {
  var onMenuCloseSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onMenuClose: onMenuCloseSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true, closeMenuOnSelect: false })));
  selectWrapper.find('div.react-select__option').at(0).simulate('click', { button: 0 });
  expect(onMenuCloseSpy).not.toHaveBeenCalled();
});

/**
 * TODO: Delete after confirmation - Not a case anymore, not getting this label in V2
 */
test.skip('accessibility > multi select > remove value label', function () {
  var props = _extends({}, BASIC_PROPS, {
    isMulti: true,
    value: [_constants.OPTIONS[0], _constants.OPTIONS[1]]
  });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper).toBeTruthy();
});

(0, _jestInCase2.default)('autoFocus', function (_ref32) {
  var _ref32$props = _ref32.props,
      props = _ref32$props === undefined ? _extends({}, BASIC_PROPS, { autoFocus: true }) : _ref32$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find('Control input').props().id).toBe(document.activeElement.id);
}, {
  'single select > should focus select on mount': {},
  'multi select > should focus select on mount': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      autoFocus: true
    })
  }
});

/**
 * onFocus hook is not being called when component is mounted is autoFocus true
 * Reproducible here ->  https://codesandbox.io/s/71xrkj0qj
 */
(0, _jestInCase2.default)('onFocus prop with autoFocus', function (_ref33) {
  var _ref33$props = _ref33.props,
      props = _ref33$props === undefined ? _extends({}, BASIC_PROPS, { autoFocus: true }) : _ref33$props;

  var onFocusSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onFocus: onFocusSpy })));
  expect(selectWrapper.find('Control input').props().id).toBe(document.activeElement.id);
  expect(onFocusSpy).toHaveBeenCalledTimes(1);
}, {
  'single select > should call auto focus only once when select is autoFocus': {
    skip: true
  },
  'multi select > should call auto focus only once when select is autoFocus': {
    skip: true,
    props: _extends({}, BASIC_PROPS, {
      autoFocus: true,
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('onFocus prop is called on on focus of input', function (_ref34) {
  var _ref34$props = _ref34.props,
      props = _ref34$props === undefined ? _extends({}, BASIC_PROPS) : _ref34$props;

  var onFocusSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { onFocus: onFocusSpy })));
  selectWrapper.find('Control input').simulate('focus');
  expect(onFocusSpy).toHaveBeenCalledTimes(1);
}, {
  'single select > should call onFocus handler on focus on input': {},
  'multi select > should call onFocus handler on focus on input': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

(0, _jestInCase2.default)('onBlur prop', function (_ref35) {
  var _ref35$props = _ref35.props,
      props = _ref35$props === undefined ? _extends({}, BASIC_PROPS) : _ref35$props;

  var onBlurSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, {
    onBlur: onBlurSpy,
    onInputChange: jest.fn(),
    onMenuClose: jest.fn()
  })));
  selectWrapper.find('Control input').simulate('blur');
  expect(onBlurSpy).toHaveBeenCalledTimes(1);
}, {
  'single select > should call onBlur handler on blur on input': {},
  'multi select > should call onBlur handler on blur on input': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

test('onInputChange() function prop to be called on blur', function () {
  var onInputChangeSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    onBlur: jest.fn(),
    onInputChange: onInputChangeSpy,
    onMenuClose: jest.fn()
  })));
  selectWrapper.find('Control input').simulate('blur');
  // Once by blur and other time by menu-close
  expect(onInputChangeSpy).toHaveBeenCalledTimes(2);
});

test('onMenuClose() function prop to be called on blur', function () {
  var onMenuCloseSpy = jest.fn();
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    onBlur: jest.fn(),
    onInputChange: jest.fn(),
    onMenuClose: onMenuCloseSpy
  })));
  selectWrapper.find('Control input').simulate('blur');
  expect(onMenuCloseSpy).toHaveBeenCalledTimes(1);
});

(0, _jestInCase2.default)('placeholder', function (_ref36) {
  var props = _ref36.props,
      _ref36$expectPlacehol = _ref36.expectPlaceholder,
      expectPlaceholder = _ref36$expectPlacehol === undefined ? 'Select...' : _ref36$expectPlacehol;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find('Control').text()).toBe(expectPlaceholder);
}, {
  'single select > should display default placeholder "Select..."': {},
  'single select > should display provided placeholder': {
    props: {
      placeholder: 'single Select...'
    },
    expectPlaceholder: 'single Select...'
  },
  'multi select > should display default placeholder "Select..."': {},
  'multi select > should display provided placeholder': {
    props: {
      placeholder: 'multi Select...'
    },
    expectPlaceholder: 'multi Select...'
  }
});

(0, _jestInCase2.default)('display placeholder once value is removed', function (_ref37) {
  var props = _ref37.props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find(Placeholder).exists()).toBeFalsy();
  selectWrapper.setProps({ value: '' });
  expect(selectWrapper.find(Placeholder).exists()).toBeTruthy();
}, {
  'single select > should display placeholder once the value is removed from select': {
    props: _extends({}, BASIC_PROPS, {
      value: _constants.OPTIONS[0]
    })
  },
  'multi select > should display placeholder once the value is removed from select': {
    props: _extends({}, BASIC_PROPS, {
      value: _constants.OPTIONS[0]
    })
  }
});

test('renders a read only input when isSearchable is false', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, { options: _constants.OPTIONS, isSearchable: false }));
  var inputWrapper = selectWrapper.find('Control input');
  expect(inputWrapper.props().readOnly).toBe(true);
});

(0, _jestInCase2.default)('clicking on disabled option', function (_ref38) {
  var _ref38$props = _ref38.props,
      props = _ref38$props === undefined ? BASIC_PROPS : _ref38$props,
      optionsSelected = _ref38.optionsSelected;

  var onChangeSpy = jest.fn();
  props = _extends({}, props, { onChange: onChangeSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true })));
  var selectOption = selectWrapper.find('div.react-select__option').findWhere(function (n) {
    return n.props().children === optionsSelected;
  });
  selectOption.simulate('click', { button: 0 });
  expect(onChangeSpy).not.toHaveBeenCalled();
}, {
  'single select > should not select the disabled option': {
    props: _extends({}, BASIC_PROPS, {
      options: [{ label: 'option 1', value: 'opt1' }, { label: 'option 2', value: 'opt2', isDisabled: true }]
    }),
    optionsSelected: 'option 2'
  },
  'multi select > should not select the disabled option': {
    props: _extends({}, BASIC_PROPS, {
      options: [{ label: 'option 1', value: 'opt1' }, { label: 'option 2', value: 'opt2', isDisabled: true }]
    }),
    optionsSelected: 'option 2'
  }
});

test('does not select anything when a disabled option is the only item in the list after a search', function () {
  var onChangeSpy = jest.fn();
  var options = [{ label: 'opt', value: 'opt1', isDisabled: true }].concat(_toConsumableArray(_constants.OPTIONS));
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy, options: options });
  // Getting error trying to change unControlled component to controlled
  // so passing inputValue
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true, inputValue: '' })));
  selectWrapper.setProps({ inputValue: 'opt' });
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });

  expect(onChangeSpy).not.toHaveBeenCalled();
  // Menu is still open
  expect(selectWrapper.find(Option).text()).toBe('opt');
});

test('render custom Input Component', function () {
  var InputComponent = function InputComponent() {
    return _react2.default.createElement('div', null);
  };
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, { components: { Input: InputComponent } })));

  expect(selectWrapper.find(Input).exists()).toBeFalsy();
  expect(selectWrapper.find(InputComponent).exists()).toBeTruthy();
});

test('render custom Menu Component', function () {
  var MenuComponent = function MenuComponent() {
    return _react2.default.createElement('div', null);
  };
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, { menuIsOpen: true, components: { Menu: MenuComponent } })));

  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
  expect(selectWrapper.find(MenuComponent).exists()).toBeTruthy();
});

test('render custom Option Component', function () {
  var OptionComponent = function OptionComponent() {
    return _react2.default.createElement('div', null);
  };
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    components: { Option: OptionComponent },
    menuIsOpen: true
  })));

  expect(selectWrapper.find(Option).exists()).toBeFalsy();
  expect(selectWrapper.find(OptionComponent).exists()).toBeTruthy();
});

(0, _jestInCase2.default)('isClearable is false', function (_ref39) {
  var _ref39$props = _ref39.props,
      props = _ref39$props === undefined ? BASIC_PROPS : _ref39$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, props));
  expect(selectWrapper.find(ClearIndicator).exists()).toBeFalsy();
}, {
  'single select > should not show the X (clear) button': {
    props: _extends({}, BASIC_PROPS, {
      isClearable: false,
      value: _constants.OPTIONS[0]
    })
  },
  'multi select > should not show X (clear) button': _extends({}, BASIC_PROPS, {
    isMulti: true,
    isClearable: false,
    value: [_constants.OPTIONS[0]]
  })
});

test('clear select by clicking on clear button > should not call onMenuOpen', function () {
  var onChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { isMulti: true, value: [_constants.OPTIONS[0]] })));

  expect(selectWrapper.find(MultiValue).length).toBe(1);
  selectWrapper.find('div.react-select__clear-indicator').simulate('mousedown', { button: 0 });
  expect(onChangeSpy).toBeCalledWith([], { action: 'clear' });
});

test('clearing select using clear button to not call onMenuOpen or onMenuClose', function () {
  var onMenuCloseSpy = jest.fn();
  var onMenuOpenSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, {
    onMenuClose: onMenuCloseSpy,
    onMenuOpen: onMenuOpenSpy
  });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { isMulti: true, value: [_constants.OPTIONS[0]] })));
  expect(selectWrapper.find(MultiValue).length).toBe(1);
  selectWrapper.find('div.react-select__clear-indicator').simulate('mousedown', { button: 0 });
  expect(onMenuOpenSpy).not.toHaveBeenCalled();
  expect(onMenuCloseSpy).not.toHaveBeenCalled();
});

test('multi select >  calls onChange when option is selected and isSearchable is false', function () {
  var onChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { isMulti: true, menuIsOpen: true, delimiter: ',', isSearchable: false })));
  selectWrapper.find('div.react-select__option').at(0).simulate('click', { button: 0 });
  expect(onChangeSpy).toHaveBeenCalledWith([{ label: '0', value: 'zero' }], {
    action: 'select-option'
  });
});

test('getOptionLabel() prop > to format the option label', function () {
  var getOptionLabel = function getOptionLabel(option) {
    return 'This a custom option ' + option.label + ' label';
  };
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, { menuIsOpen: true, getOptionLabel: getOptionLabel })));
  expect(selectWrapper.find(Option).at(0).text()).toBe('This a custom option 0 label');
});

test('formatGroupLabel function prop > to format Group label', function () {
  var formatGroupLabel = function formatGroupLabel(group) {
    return 'This is custom ' + group.label + ' header';
  };
  var options = [{
    label: 'group 1',
    options: [{ value: 1, label: '1' }, { value: 2, label: '2' }]
  }];
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, { options: options, menuIsOpen: true, formatGroupLabel: formatGroupLabel }));
  expect(selectWrapper.find(GroupHeading).text()).toBe('This is custom group 1 header');
});

test('to only render groups with at least one match when filtering', function () {
  var options = [{
    label: 'group 1',
    options: [{ value: 1, label: '1' }, { value: 2, label: '2' }]
  }, {
    label: 'group 2',
    options: [{ value: 3, label: '3' }, { value: 4, label: '4' }]
  }];
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, { options: options, menuIsOpen: true, inputValue: '' }));
  selectWrapper.setProps({ inputValue: '1' });

  expect(selectWrapper.find('Group').length).toBe(1);
  expect(selectWrapper.find('Group').find('Option').length).toBe(1);
});

test('not render any groups when there is not a single match when filtering', function () {
  var options = [{
    label: 'group 1',
    options: [{ value: 1, label: '1' }, { value: 2, label: '2' }]
  }, {
    label: 'group 2',
    options: [{ value: 3, label: '3' }, { value: 4, label: '4' }]
  }];
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, { options: options, menuIsOpen: true, inputValue: '' }));
  selectWrapper.setProps({ inputValue: '5' });

  expect(selectWrapper.find('Group').length).toBe(0);
});

test('multi select > have default value delimiter seperated', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    delimiter: ';',
    isMulti: true,
    value: [_constants.OPTIONS[0], _constants.OPTIONS[1]]
  })));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe('zero;one');
});

test('multi select > with multi character delimiter', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    delimiter: '===&===',
    isMulti: true,
    value: [_constants.OPTIONS[0], _constants.OPTIONS[1]]
  })));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe('zero===&===one');
});

test('hitting spacebar should select option if isSearchable is false', function () {
  var onChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { isSearchable: true, menuIsOpen: true })));
  // focus the first option
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 40, key: 'ArrowDown' });
  selectWrapper.simulate('keyDown', { keyCode: 32, key: ' ' });
  expect(onChangeSpy).toHaveBeenCalledWith({ label: '0', value: 'zero' }, { action: 'select-option' });
});

test('hitting escape does not call onChange if menu is Open', function () {
  var onChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true, escapeClearsValue: true, isClearable: true })));

  // focus the first option
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 40, key: 'ArrowDown' });
  selectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  expect(onChangeSpy).not.toHaveBeenCalled();
});

test('multi select > removes the selected option from the menu options when isSearchable is false', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, BASIC_PROPS, {
    delimiter: ',',
    isMulti: true,
    isSearchable: false,
    menuIsOpen: true
  })));
  expect(selectWrapper.find(Option).length).toBe(17);
  selectWrapper.setProps({ value: _constants.OPTIONS[0] });
  // expect '0' to not be options
  selectWrapper.find(Option).map(function (option) {
    expect(option.text()).not.toBe('0');
  });
  expect(selectWrapper.find(Option).length).toBe(16);
});

test('hitting ArrowUp key on closed select should focus last element', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, BASIC_PROPS));
  selectWrapper.find('div.react-select__control').simulate('keyDown', { keyCode: 38, key: 'ArrowUp' });
  expect(selectWrapper.state('focusedOption')).toEqual({
    label: '16',
    value: 'sixteen'
  });
});

test('close menu on hitting escape and clear input value if menu is open even if escapeClearsValue and isClearable are true', function () {
  var onMenuCloseSpy = jest.fn();
  var onInputChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, {
    onInputChange: onInputChangeSpy,
    onMenuClose: onMenuCloseSpy,
    value: _constants.OPTIONS[0]
  });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true, escapeClearsValue: true, isClearable: true })));
  selectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  expect(selectWrapper.state('selectValue')).toEqual([{ label: '0', value: 'zero' }]);
  expect(onMenuCloseSpy).toHaveBeenCalled();
  // once by onMenuClose and other is direct
  expect(onInputChangeSpy).toHaveBeenCalledTimes(2);
  expect(onInputChangeSpy).toHaveBeenCalledWith('', { action: 'menu-close' });
  expect(onInputChangeSpy).toHaveBeenLastCalledWith('', {
    action: 'menu-close'
  });
});

test('to not clear value when hitting escape if escapeClearsValue is false (default) and isClearable is false', function () {
  var onChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy, value: _constants.OPTIONS[0] });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { escapeClearsValue: true, isClearable: false })));

  selectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  expect(onChangeSpy).not.toHaveBeenCalled();
});

test('to not clear value when hitting escape if escapeClearsValue is true and isClearable is false', function () {
  var onChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy, value: _constants.OPTIONS[0] });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { escapeClearsValue: true, isClearable: false })));

  selectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  expect(onChangeSpy).not.toHaveBeenCalled();
});

test('to not clear value when hitting escape if escapeClearsValue is false (default) and isClearable is true', function () {
  var onChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy, value: _constants.OPTIONS[0] });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { isClearable: true })));

  selectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  expect(onChangeSpy).not.toHaveBeenCalled();
});

test('to clear value when hitting escape if escapeClearsValue and isClearable are true', function () {
  var onInputChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onInputChangeSpy, value: _constants.OPTIONS[0] });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { isClearable: true, escapeClearsValue: true })));

  selectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  expect(onInputChangeSpy).toHaveBeenCalledWith(null, { action: 'clear' });
});

(0, _jestInCase2.default)('jump over the disabled option', function (_ref40) {
  var _ref40$props = _ref40.props,
      props = _ref40$props === undefined ? _extends({}, BASIC_PROPS) : _ref40$props,
      eventsToSimulate = _ref40.eventsToSimulate,
      expectedSelectedOption = _ref40.expectedSelectedOption;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true })));
  // Focus the first option
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('keyDown', { keyCode: 40, key: 'ArrowDown' });
  eventsToSimulate.map(function (eventToSimulate) {
    var _selectWrapper$find;

    (_selectWrapper$find = selectWrapper.find(Menu)).simulate.apply(_selectWrapper$find, _toConsumableArray(eventToSimulate));
  });
  expect(selectWrapper.state('focusedOption')).toEqual(expectedSelectedOption);
}, {
  'with isOptionDisabled function prop > jumps over the first option if it is disabled': {
    props: _extends({}, BASIC_PROPS, {
      isOptionDisabled: function isOptionDisabled(option) {
        return ['zero'].indexOf(option.value) > -1;
      }
    }),
    eventsToSimulate: [],
    expectedSelectedOption: _constants.OPTIONS[1]
  },
  'with isDisabled option value > jumps over the first option if it is disabled': {
    props: _extends({}, BASIC_PROPS, {
      options: [{ label: 'option 1', value: 'opt1', isDisabled: true }].concat(_toConsumableArray(_constants.OPTIONS))
    }),
    eventsToSimulate: [],
    expectedSelectedOption: _constants.OPTIONS[0]
  },
  'with isOptionDisabled function prop > jumps over the disabled option': {
    props: _extends({}, BASIC_PROPS, {
      isOptionDisabled: function isOptionDisabled(option) {
        return ['two'].indexOf(option.value) > -1;
      }
    }),
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[3]
  },
  'with isDisabled option value > jumps over the disabled option': {
    props: _extends({}, BASIC_PROPS, {
      options: [{ label: 'option 1', value: 'opt1' }, { label: 'option 2', value: 'opt2', isDisabled: true }, { label: 'option 3', value: 'opt3' }]
    }),
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: { label: 'option 3', value: 'opt3' }
  },
  'with isOptionDisabled function prop > skips over last option when looping round when last option is disabled': {
    props: _extends({}, BASIC_PROPS, {
      options: _constants.OPTIONS.slice(0, 3),
      isOptionDisabled: function isOptionDisabled(option) {
        return ['two'].indexOf(option.value) > -1;
      }
    }),
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[0]
  },
  'with isDisabled option value > skips over last option when looping round when last option is disabled': {
    props: _extends({}, BASIC_PROPS, {
      options: [{ label: 'option 1', value: 'opt1' }, { label: 'option 2', value: 'opt2' }, { label: 'option 3', value: 'opt3', isDisabled: true }]
    }),
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: { label: 'option 1', value: 'opt1' }
  },
  'with isOptionDisabled function prop > should not select anything when all options are disabled': {
    props: _extends({}, BASIC_PROPS, {
      isOptionDisabled: function isOptionDisabled() {
        return true;
      }
    }),
    eventsToSimulate: [],
    expectedSelectedOption: null
  },
  'with isDisabled option value > should not select anything when all options are disabled': {
    props: _extends({}, BASIC_PROPS, {
      options: [{ label: 'option 1', value: 'opt1', isDisabled: true }, { label: 'option 2', value: 'opt2', isDisabled: true }, { label: 'option 3', value: 'opt3', isDisabled: true }]
    }),
    eventsToSimulate: [],
    expectedSelectedOption: null
  }
});

/**
 * Selects the option on hitting spacebar on V2
 * Needs varification
 */
test.skip('hitting spacebar should not select option if isSearchable is true (default)', function () {
  var onChangeSpy = jest.fn();
  var props = _extends({}, BASIC_PROPS, { onChange: onChangeSpy });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Select2.default, _extends({}, props, { menuIsOpen: true })));
  // Open Menu
  selectWrapper.setState({ focusedOption: _constants.OPTIONS[0] });
  selectWrapper.simulate('keyDown', { keyCode: 32, key: ' ' });
  expect(onChangeSpy).not.toHaveBeenCalled();
});