'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _jestInCase = require('jest-in-case');

var _jestInCase2 = _interopRequireDefault(_jestInCase);

var _constants = require('./constants');

var _ = require('../');

var _2 = _interopRequireDefault(_);

var _Select = require('../Select');

var _Select2 = _interopRequireDefault(_Select);

var _components = require('../components');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Control = _components.components.Control,
    Menu = _components.components.Menu;


var BASIC_PROPS = {
  className: 'react-select',
  options: _constants.OPTIONS,
  name: 'test-input-name'
};

test('defaults > snapshot', function () {
  var tree = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, null));
  expect((0, _enzymeToJson2.default)(tree)).toMatchSnapshot();
});

test('passes down the className prop', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, BASIC_PROPS, { className: 'test-class' })));
  expect(selectWrapper.find(_Select2.default).props().className).toBe('test-class');
});

(0, _jestInCase2.default)('click on dropdown indicator', function (_ref) {
  var _ref$props = _ref.props,
      props = _ref$props === undefined ? BASIC_PROPS : _ref$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  // Menu not open by defualt
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
  // Open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();

  // close open menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
}, {
  'single select > should toggle Menu': {},
  'multi select > should toggle Menu': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    })
  }
});

test('If menuIsOpen prop is passed Menu should not close on clicking Dropdown Indicator', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, BASIC_PROPS, { menuIsOpen: true })));
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();

  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();
});

test('defaultMenuIsOpen prop > should open by menu default and clicking on Dropdown Indicator should toggle menu', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, BASIC_PROPS, { defaultMenuIsOpen: true })));
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();

  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
});

test('Menu is controllable by menuIsOpen prop', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, BASIC_PROPS));
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();

  selectWrapper.setProps({ menuIsOpen: true });
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();

  selectWrapper.setProps({ menuIsOpen: false });
  expect(selectWrapper.find(Menu).exists()).toBeFalsy();
});

(0, _jestInCase2.default)('Menu to open by default if menuIsOpen prop is true', function (_ref2) {
  var _ref2$props = _ref2.props,
      props = _ref2$props === undefined ? _extends({}, BASIC_PROPS, { menuIsOpen: true }) : _ref2$props;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  // menu is not closed
  expect(selectWrapper.find(Menu).exists()).toBeTruthy();
}, {
  'single select > should keep Menu open by default if true is passed for menuIsOpen prop': {},
  'multi select > should keep Menu open by default if true is passed for menuIsOpen prop': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true,
      menuIsOpen: true
    })
  }
});

test('multi select > selecting multiple values', function () {
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, BASIC_PROPS, { isMulti: true })));
  // Open Menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });
  expect(selectWrapper.find(Control).text()).toBe('0');

  selectWrapper.find('div.react-select__dropdown-indicator').simulate('mouseDown', { button: 0 });
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });
  expect(selectWrapper.find(Control).text()).toBe('01');
});

test('defaultInputValue prop > should update the inputValue on change of input if defaultInputValue prop is provided', function () {
  var props = _extends({}, BASIC_PROPS, { defaultInputValue: '0' });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  expect(selectWrapper.find('Control input').props().value).toBe('0');
  var input = selectWrapper.find('Control input').getDOMNode();
  // Thit is to set the event.currentTarget.value
  // Enzyme issue : https://github.com/airbnb/enzyme/issues/218
  input.value = 'A';
  selectWrapper.find('Control input').simulate('change', { keyCode: 65, Key: 'A' });
  expect(selectWrapper.find('Control input').props().value).toBe('A');
});

test('inputValue prop > should not update the inputValue when on change of input if inputValue prop is provided', function () {
  var props = _extends({}, BASIC_PROPS, { inputValue: '0' });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  var input = selectWrapper.find('Control input').getDOMNode();
  // Thit is to set the event.currentTarget.value
  // Enzyme issue : https://github.com/airbnb/enzyme/issues/218
  input.value = 'A';
  selectWrapper.find('Control input').simulate('change', { keyCode: 65, Key: 'A' });
  expect(selectWrapper.find('Control input').props().value).toBe('0');
});

test('defaultValue prop > should update the value on selecting option', function () {
  var props = _extends({}, BASIC_PROPS, { defaultValue: [_constants.OPTIONS[0]] });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, props, { menuIsOpen: true })));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe('zero');
  selectWrapper.find('div.react-select__option').at(1).simulate('click');
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe('one');
});

test('value prop > should update the value on selecting option', function () {
  var props = _extends({}, BASIC_PROPS, { value: [_constants.OPTIONS[0]] });
  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, _extends({}, props, { menuIsOpen: true })));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe('zero');
  selectWrapper.find('div.react-select__option').at(1).simulate('click');
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe('zero');
});

(0, _jestInCase2.default)('Integration tests > selecting an option > mouse interaction', function (_ref3) {
  var _ref3$props = _ref3.props,
      props = _ref3$props === undefined ? _extends({}, BASIC_PROPS) : _ref3$props,
      event = _ref3.event,
      selectOption = _ref3.selectOption,
      expectSelectedOption = _ref3.expectSelectedOption;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  var toSelectOption = selectWrapper.find('div.react-select__option').findWhere(function (n) {
    return n.props().children === selectOption.label;
  });
  toSelectOption.simulate.apply(toSelectOption, _toConsumableArray(event));
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe(expectSelectedOption);
}, {
  'single select > clicking on an option > should select the clicked option': {
    props: _extends({}, BASIC_PROPS, {
      menuIsOpen: true
    }),
    event: ['click', { button: 0 }],
    selectOption: _constants.OPTIONS[2],
    expectSelectedOption: 'two'
  },
  'multi select > clicking on an option > should select the clicked option': {
    props: _extends({}, BASIC_PROPS, {
      delimiter: ', ',
      isMulti: true,
      menuIsOpen: true
    }),
    event: ['click', { button: 0 }],
    selectOption: _constants.OPTIONS[2],
    expectSelectedOption: 'two'
  }
});

(0, _jestInCase2.default)('Integration tests > selection an option > keyboard interaction', function (_ref4) {
  var _ref4$props = _ref4.props,
      props = _ref4$props === undefined ? _extends({}, BASIC_PROPS) : _ref4$props,
      eventsToSimulate = _ref4.eventsToSimulate,
      expectedSelectedOption = _ref4.expectedSelectedOption;

  var selectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, props));
  // open the menu
  selectWrapper.find('div.react-select__dropdown-indicator').simulate('keyDown', { keyCode: 40, key: 'ArrowDown' });
  eventsToSimulate.map(function (eventToSimulate) {
    var _selectWrapper$find;

    (_selectWrapper$find = selectWrapper.find(Menu)).simulate.apply(_selectWrapper$find, _toConsumableArray(eventToSimulate));
  });
  selectWrapper.find(Menu).simulate('keyDown', { keyCode: 13, key: 'Enter' });
  expect(selectWrapper.find('input[type="hidden"]').props().value).toBe(expectedSelectedOption);
}, {
  'single select > open select and hit enter > should select first option': {
    eventsToSimulate: [],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'single select > (open select -> 3 x ArrowDown -> Enter) > should select the forth option in the select': {
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[3].value
  },
  'single select > (open select -> 2 x ArrowDown -> 2 x ArrowUp -> Enter) > should select the first option in the select': {
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 38, key: 'ArrowUp' }], ['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'single select > (open select -> 1 x ArrowUp -> Enter) > should select the last option in the select': {
    eventsToSimulate: [['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'single select > (open select -> 1 x PageDown -> Enter) > should select the first option on next page - default pageSize 5': {
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }]],
    expectedSelectedOption: _constants.OPTIONS[5].value
  },
  'single select > (open select -> 1 x PageDown -> 1 x ArrowDown -> 1 x PageUp -> Enter) > should select the second option - default pageSize 5': {
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 33, key: 'PageUp' }]],
    expectedSelectedOption: _constants.OPTIONS[1].value
  },
  'single select > (open select -> End -> Enter) > should select the last option': {
    eventsToSimulate: [['keyDown', { keyCode: 35, key: 'End' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'single select > (open select -> 3 x PageDown -> Home -> Enter) > should select the last option': {
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 36, key: 'Home' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'single select > cycle options > ( open select -> End -> ArrowDown -> Enter) > should select the first option': {
    eventsToSimulate: [['keyDown', { keyCode: 35, key: 'End' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'single select > cycle options > (open select -> ArrowUp -> Enter) > should select the last option': {
    eventsToSimulate: [['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'multi select > open select and hit enter > should select first option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'multi select > (open select -> 3 x ArrowDown -> Enter) > should select the forth option in the select': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[3].value
  },
  'multi select > (open select -> 2 x ArrowDown -> 2 x ArrowUp -> Enter) > should select the first option in the select': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 38, key: 'ArrowUp' }], ['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'multi select > (open select -> 1 x ArrowUp -> Enter) > should select the last option in the select': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'multi select > (open select -> 1 x PageDown -> Enter) > should select the first option on next page - default pageSize 5': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }]],
    expectedSelectedOption: _constants.OPTIONS[5].value
  },
  'multi select > (open select -> 1 x PageDown -> 1 x ArrowDown -> 1 x PageUp -> Enter) > should select the second option - default pageSize 5': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }], ['keyDown', { keyCode: 33, key: 'PageUp' }]],
    expectedSelectedOption: _constants.OPTIONS[1].value
  },
  'multi select > (open select -> End -> Enter) > should select the last option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 35, key: 'End' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  },
  'multi select > (open select -> 3 x PageDown -> Home -> Enter) > should select the last option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 34, key: 'PageDown' }], ['keyDown', { keyCode: 36, key: 'Home' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'multi select > cycle options > ( open select -> End -> ArrowDown -> Enter) > should select the first option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 35, key: 'End' }], ['keyDown', { keyCode: 40, key: 'ArrowDown' }]],
    expectedSelectedOption: _constants.OPTIONS[0].value
  },
  'multi select > cycle options > (open select -> ArrowUp -> Enter) > should select the last option': {
    props: _extends({}, BASIC_PROPS, {
      isMulti: true
    }),
    eventsToSimulate: [['keyDown', { keyCode: 38, key: 'ArrowUp' }]],
    expectedSelectedOption: _constants.OPTIONS[_constants.OPTIONS.length - 1].value
  }
});