'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _jestInCase = require('jest-in-case');

var _jestInCase2 = _interopRequireDefault(_jestInCase);

var _Creatable = require('../Creatable');

var _Creatable2 = _interopRequireDefault(_Creatable);

var _constants = require('./constants');

var _components = require('../components');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Menu = _components.components.Menu,
    NoOptionsMessage = _components.components.NoOptionsMessage;


test('defaults - snapshot', function () {
  var tree = (0, _enzyme.shallow)(_react2.default.createElement(_Creatable2.default, null));
  expect((0, _enzymeToJson2.default)(tree)).toMatchSnapshot();
});

(0, _jestInCase2.default)('filtered option is an exact match for an existing option', function (_ref) {
  var _ref$props = _ref.props,
      props = _ref$props === undefined ? { options: _constants.OPTIONS } : _ref$props;

  var creatableSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Creatable2.default, _extends({ menuIsOpen: true }, props)));
  creatableSelectWrapper.setProps({ inputValue: 'one' });
  expect(creatableSelectWrapper.find(Menu).text()).not.toEqual(expect.stringContaining('create'));
}, {
  'single select > should not show "create..." prompt"': {},
  'multi select > should not show "create..." prompt"': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('filterOptions returns invalid value ( null )', function (_ref2) {
  var _ref2$props = _ref2.props,
      props = _ref2$props === undefined ? { option: _constants.OPTIONS } : _ref2$props;

  var filterOptionSpy = jest.fn().mockReturnValue(null);
  var creatableSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Creatable2.default, _extends({ filterOption: filterOptionSpy, menuIsOpen: true }, props)));
  creatableSelectWrapper.setProps({ inputValue: 'one' });
  expect(creatableSelectWrapper.find(NoOptionsMessage).exists()).toBeTruthy();
  expect(creatableSelectWrapper.find(Menu).text()).not.toEqual(expect.stringContaining('create'));
}, {
  'single select > should not show "create..." prompt"': {},
  'multi select > should not show "create..." prompt"': {
    props: {
      isMulti: true,
      option: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('inputValue does not match any option after filter', function (_ref3) {
  var _ref3$props = _ref3.props,
      props = _ref3$props === undefined ? { options: _constants.OPTIONS } : _ref3$props;

  var creatableSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Creatable2.default, _extends({ menuIsOpen: true }, props)));
  creatableSelectWrapper.setProps({ inputValue: 'option not is list' });
  expect(creatableSelectWrapper.find(Menu).text()).toBe('Create "option not is list"');
}, {
  'single select > should show a placeholder "create..." prompt': {},
  'multi select > should show a placeholder "create..." prompt': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('isValidNewOption() prop', function (_ref4) {
  var _ref4$props = _ref4.props,
      props = _ref4$props === undefined ? { options: _constants.OPTIONS } : _ref4$props;

  var isValidNewOption = jest.fn(function (options) {
    return options === 'new Option';
  });
  var creatableSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Creatable2.default, _extends({ menuIsOpen: true }, props, { isValidNewOption: isValidNewOption })));

  creatableSelectWrapper.setProps({ inputValue: 'new Option' });
  expect(creatableSelectWrapper.find(Menu).text()).toEqual(expect.stringContaining('Create "new Option"'));
  expect(creatableSelectWrapper.find(NoOptionsMessage).exists()).toBeFalsy();

  creatableSelectWrapper.setProps({ inputValue: 'invalid new Option' });
  expect(creatableSelectWrapper.find(Menu).text()).not.toEqual(expect.stringContaining('Create "invalid new Option"'));
  expect(creatableSelectWrapper.find(NoOptionsMessage).exists()).toBeTruthy();
}, {
  'single select > should show "create..." prompt only if isValidNewOption returns thruthy value': {},
  'multi select > should show "create..." prompt only if isValidNewOption returns thruthy value': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('close by hitting escape with search text present', function (_ref5) {
  var _ref5$props = _ref5.props,
      props = _ref5$props === undefined ? { options: _constants.OPTIONS } : _ref5$props;

  var creatableSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Creatable2.default, _extends({ menuIsOpen: true }, props)));
  creatableSelectWrapper.setState({ inputValue: 'new Option' });
  creatableSelectWrapper.update();
  creatableSelectWrapper.simulate('keyDown', { keyCode: 27, key: 'Escape' });
  creatableSelectWrapper.update();
  expect(creatableSelectWrapper.state('inputValue')).toBe('');
}, {
  'single select > should remove the search text': {},
  'multi select > should remove the search text': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});

test('should remove the new option after closing on blur', function () {
  var creatableSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Creatable2.default, { menuIsOpen: true, options: _constants.OPTIONS }));
  creatableSelectWrapper.setState({ inputValue: 'new Option' });
  creatableSelectWrapper.find('Control input').simulate('blur');
  expect(creatableSelectWrapper.state('inputValue')).toBe('');
});

(0, _jestInCase2.default)('getNewOptionData() prop', function (_ref6) {
  var _ref6$props = _ref6.props,
      props = _ref6$props === undefined ? { options: _constants.OPTIONS } : _ref6$props;

  var getNewOptionDataSpy = jest.fn(function (label) {
    return {
      label: 'custom text ' + label,
      value: label
    };
  });
  var creatableSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Creatable2.default, _extends({ menuIsOpen: true }, props, { getNewOptionData: getNewOptionDataSpy })));
  creatableSelectWrapper.setState({ inputValue: 'new Option' });
  expect(creatableSelectWrapper.find(Menu).text()).toEqual(expect.stringContaining('custom text new Option'));
}, {
  'single select > should create option as per label returned from getNewOptionData': {},
  'multi select > should create option as per label returned from getNewOptionData': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});

(0, _jestInCase2.default)('formatCreateLabel() prop', function (_ref7) {
  var _ref7$props = _ref7.props,
      props = _ref7$props === undefined ? { options: _constants.OPTIONS } : _ref7$props;

  var formatCreateLabelSpy = jest.fn(function (label) {
    return 'custom label "' + label + '"';
  });
  var creatableSelectWrapper = (0, _enzyme.mount)(_react2.default.createElement(_Creatable2.default, _extends({
    menuIsOpen: true
  }, props, {
    formatCreateLabel: formatCreateLabelSpy
  })));
  creatableSelectWrapper.setState({ inputValue: 'new Option' });
  expect(creatableSelectWrapper.find(Menu).text()).toEqual(expect.stringContaining('custom label "new Option"'));
}, {
  'single select > should show label of custom option as per text returned from formatCreateLabel': {},
  'multi select > should show label of custom option as per text returned from formatCreateLabel': {
    props: {
      isMulti: true,
      options: _constants.OPTIONS
    }
  }
});