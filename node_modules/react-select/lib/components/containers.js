'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndicatorsContainer = exports.indicatorsContainerCSS = exports.ValueContainer = exports.valueContainerCSS = exports.SelectContainer = exports.containerCSS = undefined;

var _emotion = require('emotion');

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _primitives = require('../primitives');

var _theme = require('../theme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// ==============================
// Root Container
// ==============================

var containerCSS = exports.containerCSS = function containerCSS(_ref) {
  var isDisabled = _ref.isDisabled,
      isRtl = _ref.isRtl;
  return {
    direction: isRtl ? 'rtl' : null,
    pointerEvents: isDisabled ? 'none' : null, // cancel mouse events when disabled
    position: 'relative'
  };
};
var SelectContainer = exports.SelectContainer = function SelectContainer(props) {
  var children = props.children,
      cx = props.cx,
      getStyles = props.getStyles,
      innerProps = props.innerProps,
      isDisabled = props.isDisabled,
      isRtl = props.isRtl;

  return _react2.default.createElement(
    _primitives.Div,
    _extends({
      className: (0, _emotion.merge)((0, _emotion.css)(getStyles('container', props)) + (' ' + cx('', { isDisabled: isDisabled, isRtl: isRtl })))
    }, innerProps),
    children
  );
};

// ==============================
// Value Container
// ==============================

var valueContainerCSS = exports.valueContainerCSS = function valueContainerCSS(_ref2) {
  var maxHeight = _ref2.maxHeight;
  return {
    alignItems: 'center',
    display: 'flex',
    flex: 1,
    flexWrap: 'wrap',
    maxHeight: maxHeight, // max-height allows scroll when multi
    overflowY: 'auto',
    padding: _theme.spacing.baseUnit / 2 + 'px ' + _theme.spacing.baseUnit * 2 + 'px',
    WebkitOverflowScrolling: 'touch',
    position: 'relative'
  };
};

var ValueContainer = exports.ValueContainer = function (_Component) {
  _inherits(ValueContainer, _Component);

  function ValueContainer() {
    var _ref3;

    var _temp, _this, _ret;

    _classCallCheck(this, ValueContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref3 = ValueContainer.__proto__ || Object.getPrototypeOf(ValueContainer)).call.apply(_ref3, [this].concat(args))), _this), _this.shouldScrollBottom = false, _this.getScrollContainer = function (ref) {
      _this.node = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ValueContainer, [{
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {
      if (!this.props.isMulti) return;

      // scroll only if the user was already at the bottom
      var total = this.node.scrollTop + this.node.offsetHeight;
      this.shouldScrollBottom = total === this.node.scrollHeight;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (!this.props.isMulti) return;

      // ensure we're showing items being added by forcing scroll to the bottom
      if (this.shouldScrollBottom && this.node) {
        this.node.scrollTop = this.node.scrollHeight;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          cx = _props.cx,
          isMulti = _props.isMulti,
          getStyles = _props.getStyles,
          hasValue = _props.hasValue;


      return _react2.default.createElement(
        _primitives.Div,
        {
          innerRef: isMulti ? this.getScrollContainer : undefined,
          className: (0, _emotion.merge)((0, _emotion.css)(getStyles('valueContainer', this.props)) + (' ' + cx('value-container', { isMulti: isMulti, hasValue: hasValue })))
        },
        children
      );
    }
  }]);

  return ValueContainer;
}(_react.Component);

// ==============================
// Indicator Container
// ==============================

var indicatorsContainerCSS = exports.indicatorsContainerCSS = function indicatorsContainerCSS() {
  return {
    alignItems: 'center',
    alignSelf: 'stretch',
    display: 'flex',
    flexShrink: 0
  };
};
var IndicatorsContainer = exports.IndicatorsContainer = function IndicatorsContainer(props) {
  var children = props.children,
      cx = props.cx,
      getStyles = props.getStyles;


  return _react2.default.createElement(
    _primitives.Div,
    {
      className: (0, _emotion.merge)((0, _emotion.css)(getStyles('indicatorsContainer', props)) + (' ' + cx('indicators')))
    },
    children
  );
};